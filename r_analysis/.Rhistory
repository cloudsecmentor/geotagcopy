suggested.cust.GPSAlt = cust.GPSAlt
) %>%
select_at(vars(matches("suggested")))
}
### progress bar
pb <- progress_bar$new(total = nrow(mm.auth.date.gps))
mm.auth.date.gps %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))%>%
mutate (df = list(mm.auth.date.gps)) %>%
count(cust.author)
mm.auth.date.gps.recs <-
mm.auth.date.gps %>%
mutate (df = list(mm.auth.date.gps)) %>%
mutate ( sugg = ifelse( is.na(cust.GPSLatt),
pmap(. ,  fun_suggest_gps),
NA)) %>%
unnest(sugg) %>%
select (-df)
mm.auth.date.gps %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))%>%
mutate (df = list(mm.auth.date.gps)) %>%
count(cust.author)
mm.auth.date.gps
mm.auth.date.gps %>%
mutate (df = list(mm.auth.date.gps)) %>%
mutate ( sugg = ifelse( is.na(cust.GPSLatt),
pmap(. ,  fun_suggest_gps),
NA))
mm.auth.date.gps %>%
mutate (df = list(mm.auth.date.gps))
### function to suggest
fun_suggest_gps <- function (SourceFile, cust.MediaDate, cust.author, df, ...) {
pb$tick()
tmp.cust.author <- cust.author
tmp.cust.MediaDate <- cust.MediaDate
df %>%
filter ( !is.na(cust.GPSLatt)) %>%
filter (cust.author == tmp.cust.author) %>%
mutate ( suggested.time.diff =  abs (difftime(cust.MediaDate, tmp.cust.MediaDate, units = "hours"))) %>%
arrange ( time.diff ) %>%
slice_head(n = 1) %>%
rename(
suggested.SourceFile = SourceFile,
suggested.cust.GPSLatt = cust.GPSLatt,
suggested.cust.GPSLong = cust.GPSLong,
suggested.cust.GPSAlt = cust.GPSAlt
) %>%
select_at(vars(matches("suggested")))
}
mm.auth.date.gps %>%
mutate (df = list(mm.auth.date.gps)) %>%
mutate ( sugg = ifelse( is.na(cust.GPSLatt),
pmap(. ,  fun_suggest_gps),
NA))
View(mm.auth.date.gps)
mm.auth.date.gps %>%
select_at((vars(matches("cust"))))
mm.auth.date.gps %>%
mutate (df = list(mm.auth.date.gps))
mm.auth.date.gps  %>%
mutate (df = list(mm.auth.date.gps)) %>%
filter(is.na(cust.GPSLatt))
mm.auth.date.gps  %>%
mutate (df = list(mm.auth.date.gps)) %>%
filter(is.na(cust.GPSLatt)) %>%
mutate ( sugg = pmap(. ,  fun_suggest_gps))
mm.auth.date.gps  %>%
select_at((vars(matches("cust"))))
mm.auth.date.gps  %>%
select_at((vars(matches("cust."))))
mm.auth.date.gps  %>%
select_at((vars(matches("cust\\."))))
mm.auth.date.gps  %>%
select_at((vars(matches("cust\\.")))) %>%
slice_head(n = 5)
a <-
mm.auth.date.gps  %>%
select_at((vars(matches("cust\\.")))) %>%
slice_head(n = 5)
df <- mm.auth.date.gps
mm.auth.date.gps  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5)
a <-
mm.auth.date.gps  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5)
df <- mm.auth.date.gps
a %>%
mutate (df = list(mm.auth.date.gps)) %>%
filter(is.na(cust.GPSLatt))
a %>%
mutate (df = list(mm.auth.date.gps)) %>%
filter(is.na(cust.GPSLatt)) %>%
mutate ( sugg = pmap(. ,  fun_suggest_gps))
df <-
a %>% pull (SourceFile)
a %>% pull (SourceFile)
SourceFile <-  "/Users/sergey/Pictures/iPhone Sergey/DCIM/116APPLE/IMG_6114.JPG"
a
cust.author <- "authS"
a %>% pull (cust.MediaDate)
a %>% pull (cust.MediaDate)[[1]]
ls
library(tidyverse)
library(progress)
mm.file <- "../data/media_metadata.csv"
media_metadata <- read_csv(mm.file)
authors.regex <-
tribble(
~author, ~col.name, ~regex.detect, ~def.Auth,
"authI", "SourceFile", "irina", FALSE,
"authT", "SourceFile", "tim", FALSE,
"authM", "SourceFile", "mela", FALSE,
"authS", "SourceFile", "serg", TRUE,
)
fun_author_SourceFile <- function(SourceFile) {
# function to determining who is the author of the media file
# by the path where the file is located
auth.filtered <-
authors.regex %>%
filter(str_detect(SourceFile%>%
str_to_lower(),
regex.detect))
if ( auth.filtered %>% nrow() > 0) {
auth.ret <- auth.filtered[["author"]][[1]]
} else {
auth.ret <- authors.regex %>%
filter(def.Auth) %>%
pull (author)
print("Warning: using default")
}
auth.ret
}
## add author, date and GPS cooords
mm.auth.date.gps <-
media_metadata %>%
mutate (cust.author = map_chr(SourceFile, fun_author_SourceFile))%>%
mutate (cust.MediaDate = parse_datetime(`File:FileModifyDate`, "%Y:%m:%d %H:%M:%S %z")) %>%
mutate(cust.GPSAlt = `Composite:GPSAltitude`) %>%
separate(`Composite:GPSPosition`, into = c("cust.GPSLatt", "cust.GPSLong"), sep = " ")
### function to suggest
fun_suggest_gps <- function (SourceFile, cust.MediaDate, cust.author, df, ...) {
pb$tick()
tmp.cust.author <- cust.author
tmp.cust.MediaDate <- cust.MediaDate
df %>%
filter ( !is.na(cust.GPSLatt)) %>%
filter (cust.author == tmp.cust.author) %>%
mutate ( suggested.time.diff =  abs (difftime(cust.MediaDate, tmp.cust.MediaDate, units = "hours"))) %>%
arrange ( time.diff ) %>%
slice_head(n = 1) %>%
rename(
suggested.SourceFile = SourceFile,
suggested.cust.GPSLatt = cust.GPSLatt,
suggested.cust.GPSLong = cust.GPSLong,
suggested.cust.GPSAlt = cust.GPSAlt
) %>%
select_at(vars(matches("suggested")))
}
### progress bar
pb <- progress_bar$new(total = nrow(mm.auth.date.gps))
mm.auth.date.gps %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))%>%
mutate (df = list(mm.auth.date.gps)) %>%
count(cust.author)
a <-
mm.auth.date.gps  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5)
SourceFile <-  "/Users/sergey/Pictures/iPhone Sergey/DCIM/116APPLE/IMG_6114.JPG"
cust.author <- "authS"
cust.MediaDate
help.start()
library(tidyverse)
library(progress)
mm.file <- "../data/media_metadata.csv"
media_metadata <- read_csv(mm.file)
authors.regex <-
tribble(
~author, ~col.name, ~regex.detect, ~def.Auth,
"authI", "SourceFile", "irina", FALSE,
"authT", "SourceFile", "tim", FALSE,
"authM", "SourceFile", "mela", FALSE,
"authS", "SourceFile", "serg", TRUE,
)
fun_author_SourceFile <- function(SourceFile) {
# function to determining who is the author of the media file
# by the path where the file is located
auth.filtered <-
authors.regex %>%
filter(str_detect(SourceFile%>%
str_to_lower(),
regex.detect))
if ( auth.filtered %>% nrow() > 0) {
auth.ret <- auth.filtered[["author"]][[1]]
} else {
auth.ret <- authors.regex %>%
filter(def.Auth) %>%
pull (author)
print("Warning: using default")
}
auth.ret
}
## add author, date and GPS cooords
mm.auth.date.gps <-
media_metadata %>%
mutate (cust.author = map_chr(SourceFile, fun_author_SourceFile))%>%
mutate (cust.MediaDate = parse_datetime(`File:FileModifyDate`, "%Y:%m:%d %H:%M:%S %z")) %>%
mutate(cust.GPSAlt = `Composite:GPSAltitude`) %>%
separate(`Composite:GPSPosition`, into = c("cust.GPSLatt", "cust.GPSLong"), sep = " ")
### function to suggest
fun_suggest_gps <- function (SourceFile, cust.MediaDate, cust.author, df, ...) {
pb$tick()
tmp.cust.author <- cust.author
tmp.cust.MediaDate <- cust.MediaDate
df %>%
filter ( !is.na(cust.GPSLatt)) %>%
filter (cust.author == tmp.cust.author) %>%
mutate ( suggested.time.diff =  abs (difftime(cust.MediaDate, tmp.cust.MediaDate, units = "hours"))) %>%
arrange ( time.diff ) %>%
slice_head(n = 1) %>%
rename(
suggested.SourceFile = SourceFile,
suggested.cust.GPSLatt = cust.GPSLatt,
suggested.cust.GPSLong = cust.GPSLong,
suggested.cust.GPSAlt = cust.GPSAlt
) %>%
select_at(vars(matches("suggested")))
}
### progress bar
pb <- progress_bar$new(total = nrow(mm.auth.date.gps))
mm.auth.date.gps %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))%>%
mutate (df = list(mm.auth.date.gps)) %>%
count(cust.author)
mm.auth.date.gps  %>%
mutate (df = list(mm.auth.date.gps)) %>%
filter(is.na(cust.GPSLatt)) %>%
mutate ( sugg = pmap(. ,  fun_suggest_gps))
a <-
mm.auth.date.gps  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5)
SourceFile <-  "/Users/sergey/Pictures/iPhone Sergey/DCIM/116APPLE/IMG_6114.JPG"
cust.author <- "authS"
cust.MediaDate
a %>% filter (SourceFile == Source)
a %>% filter (SourceFile == SourceFile)
mm.auth.date.gps  %>%
mutate (df = list(mm.auth.date.gps)) %>%
filter(is.na(cust.GPSLatt)) %>%
mutate ( sugg = pmap(. ,  fun_suggest_gps))
a <-
mm.auth.date.gps  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5)
SourceFile <-  "/Users/sergey/Pictures/iPhone Sergey/DCIM/116APPLE/IMG_6114.JPG"
cust.author <- "authS"
a %>% filter (SourceFile == SourceFil)
library(pillar)
install.packages(c("backports", "BH", "bitops", "blob", "boot", "broom", "bslib", "cachem", "callr", "caret", "caTools", "class", "classInt", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "commonmark", "corpus", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "doSNOW", "dplyr", "e1071", "ellipsis", "evaluate", "extrafont", "fansi", "farver", "fastmap", "fastmatch", "forcats", "foreach", "foreign", "fs", "gdata", "generics", "ggplot2", "ggrepel", "ggspatial", "gh", "git2r", "glue", "gmodels", "googlePolylines", "googleway", "gower", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "ipred", "irlba", "isoband", "ISOcodes", "iterators", "janeaustenr", "jpeg", "jqr", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "lifecycle", "lsa", "lubridate", "magrittr", "maps", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "network", "nlme", "NLP", "nnet", "openssl", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "png", "prettymapr", "pROC", "processx", "prodlim", "profvis", "proxyC", "ps", "purrr", "quanteda", "R6", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "readxl", "recipes", "reprex", "rgdal", "rgeos", "rjson", "rlang", "rmarkdown", "rnaturalearth", "rosm", "rpart", "rpart.plot", "rprojroot", "rstudioapi", "Rttf2pt1", "rvest", "s2", "sass", "scales", "sf", "shiny", "slam", "sna", "snow", "SnowballC", "sourcetools", "sp", "spatial", "SQUAREM", "statnet.common", "stopwords", "stringi", "stringr", "survival", "svMisc", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "tinytex", "tm", "tokenizers", "units", "usethis", "utf8", "vctrs", "viridisLite", "whisker", "withr", "wk", "xfun", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "BH", "bitops", "blob", "boot", "broom", "bslib", "cachem", "callr", "caret", "caTools", "class", "classInt", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "commonmark", "corpus", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "doSNOW", "dplyr", "e1071", "ellipsis", "evaluate", "extrafont", "fansi", "farver", "fastmap", "fastmatch", "forcats", "foreach", "foreign", "fs", "gdata", "generics", "ggplot2", "ggrepel", "ggspatial", "gh", "git2r", "glue", "gmodels", "googlePolylines", "googleway", "gower", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "ipred", "irlba", "isoband", "ISOcodes", "iterators", "janeaustenr", "jpeg", "jqr", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "lifecycle", "lsa", "lubridate", "magrittr", "maps", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "network", "nlme", "NLP", "nnet", "openssl", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "png", "prettymapr", "pROC", "processx", "prodlim", "profvis", "proxyC", "ps", "purrr", "quanteda", "R6", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "readxl", "recipes", "reprex", "rgdal", "rgeos", "rjson", "rlang", "rmarkdown", "rnaturalearth", "rosm", "rpart", "rpart.plot", "rprojroot", "rstudioapi", "Rttf2pt1", "rvest", "s2", "sass", "scales", "sf", "shiny", "slam", "sna", "snow", "SnowballC", "sourcetools", "sp", "spatial", "SQUAREM", "statnet.common", "stopwords", "stringi", "stringr", "survival", "svMisc", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "tinytex", "tm", "tokenizers", "units", "usethis", "utf8", "vctrs", "viridisLite", "whisker", "withr", "wk", "xfun", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "BH", "bitops", "blob", "boot", "broom", "bslib", "cachem", "callr", "caret", "caTools", "class", "classInt", "cli", "clipr", "cluster", "coda", "codetools", "colorspace", "commonmark", "corpus", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "doSNOW", "dplyr", "e1071", "ellipsis", "evaluate", "extrafont", "fansi", "farver", "fastmap", "fastmatch", "forcats", "foreach", "foreign", "fs", "gdata", "generics", "ggplot2", "ggrepel", "ggspatial", "gh", "git2r", "glue", "gmodels", "googlePolylines", "googleway", "gower", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "ipred", "irlba", "isoband", "ISOcodes", "iterators", "janeaustenr", "jpeg", "jqr", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lava", "lifecycle", "lsa", "lubridate", "magrittr", "maps", "markdown", "MASS", "Matrix", "mgcv", "mime", "modelr", "network", "nlme", "NLP", "nnet", "openssl", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "png", "prettymapr", "pROC", "processx", "prodlim", "profvis", "proxyC", "ps", "purrr", "quanteda", "R6", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "readxl", "recipes", "reprex", "rgdal", "rgeos", "rjson", "rlang", "rmarkdown", "rnaturalearth", "rosm", "rpart", "rpart.plot", "rprojroot", "rstudioapi", "Rttf2pt1", "rvest", "s2", "sass", "scales", "sf", "shiny", "slam", "sna", "snow", "SnowballC", "sourcetools", "sp", "spatial", "SQUAREM", "statnet.common", "stopwords", "stringi", "stringr", "survival", "svMisc", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeDate", "tinytex", "tm", "tokenizers", "units", "usethis", "utf8", "vctrs", "viridisLite", "whisker", "withr", "wk", "xfun", "XML", "xml2", "yaml", "zip", "zoo"))
library(tidyverse)
library(progress)
mm.file <- "../data/media_metadata.csv"
media_metadata <- read_csv(mm.file)
authors.regex <-
tribble(
~author, ~col.name, ~regex.detect, ~def.Auth,
"authI", "SourceFile", "irina", FALSE,
"authT", "SourceFile", "tim", FALSE,
"authM", "SourceFile", "mela", FALSE,
"authS", "SourceFile", "serg", TRUE,
)
install.packages("tidyverse")
library(tidyverse)
mm.file <- "../data/media_metadata.csv"
media_metadata <- read_csv(mm.file)
authors.regex <-
tribble(
~author, ~col.name, ~regex.detect, ~def.Auth,
"authI", "SourceFile", "irina", FALSE,
"authT", "SourceFile", "tim", FALSE,
"authM", "SourceFile", "mela", FALSE,
"authS", "SourceFile", "serg", TRUE,
)
fun_author_SourceFile <- function(SourceFile) {
# function to determining who is the author of the media file
# by the path where the file is located
auth.filtered <-
authors.regex %>%
filter(str_detect(SourceFile%>%
str_to_lower(),
regex.detect))
if ( auth.filtered %>% nrow() > 0) {
auth.ret <- auth.filtered[["author"]][[1]]
} else {
auth.ret <- authors.regex %>%
filter(def.Auth) %>%
pull (author)
print("Warning: using default")
}
auth.ret
}
## add author, date and GPS cooords
mm.auth.date.gps <-
media_metadata %>%
mutate (cust.author = map_chr(SourceFile, fun_author_SourceFile))%>%
mutate (cust.MediaDate = parse_datetime(`File:FileModifyDate`, "%Y:%m:%d %H:%M:%S %z")) %>%
mutate(cust.GPSAlt = `Composite:GPSAltitude`) %>%
separate(`Composite:GPSPosition`, into = c("cust.GPSLatt", "cust.GPSLong"), sep = " ")
### function to suggest
fun_suggest_gps <- function (SourceFile, cust.MediaDate, cust.author, df, ...) {
pb$tick()
tmp.cust.author <- cust.author
tmp.cust.MediaDate <- cust.MediaDate
df %>%
filter ( !is.na(cust.GPSLatt)) %>%
filter (cust.author == tmp.cust.author) %>%
mutate ( suggested.time.diff =  abs (difftime(cust.MediaDate, tmp.cust.MediaDate, units = "hours"))) %>%
arrange ( time.diff ) %>%
slice_head(n = 1) %>%
rename(
suggested.SourceFile = SourceFile,
suggested.cust.GPSLatt = cust.GPSLatt,
suggested.cust.GPSLong = cust.GPSLong,
suggested.cust.GPSAlt = cust.GPSAlt
) %>%
select_at(vars(matches("suggested")))
}
### progress bar
pb <- progress_bar$new(total = nrow(mm.auth.date.gps))
library(progress)
mm.file <- "../data/media_metadata.csv"
media_metadata <- read_csv(mm.file)
authors.regex <-
tribble(
~author, ~col.name, ~regex.detect, ~def.Auth,
"authI", "SourceFile", "irina", FALSE,
"authT", "SourceFile", "tim", FALSE,
"authM", "SourceFile", "mela", FALSE,
"authS", "SourceFile", "serg", TRUE,
)
fun_author_SourceFile <- function(SourceFile) {
# function to determining who is the author of the media file
# by the path where the file is located
auth.filtered <-
authors.regex %>%
filter(str_detect(SourceFile%>%
str_to_lower(),
regex.detect))
if ( auth.filtered %>% nrow() > 0) {
auth.ret <- auth.filtered[["author"]][[1]]
} else {
auth.ret <- authors.regex %>%
filter(def.Auth) %>%
pull (author)
print("Warning: using default")
}
auth.ret
}
## add author, date and GPS cooords
mm.auth.date.gps <-
media_metadata %>%
mutate (cust.author = map_chr(SourceFile, fun_author_SourceFile))%>%
mutate (cust.MediaDate = parse_datetime(`File:FileModifyDate`, "%Y:%m:%d %H:%M:%S %z")) %>%
mutate(cust.GPSAlt = `Composite:GPSAltitude`) %>%
separate(`Composite:GPSPosition`, into = c("cust.GPSLatt", "cust.GPSLong"), sep = " ")
### function to suggest
fun_suggest_gps <- function (SourceFile, cust.MediaDate, cust.author, df, ...) {
pb$tick()
tmp.cust.author <- cust.author
tmp.cust.MediaDate <- cust.MediaDate
df %>%
filter ( !is.na(cust.GPSLatt)) %>%
filter (cust.author == tmp.cust.author) %>%
mutate ( suggested.time.diff =  abs (difftime(cust.MediaDate, tmp.cust.MediaDate, units = "hours"))) %>%
arrange ( time.diff ) %>%
slice_head(n = 1) %>%
rename(
suggested.SourceFile = SourceFile,
suggested.cust.GPSLatt = cust.GPSLatt,
suggested.cust.GPSLong = cust.GPSLong,
suggested.cust.GPSAlt = cust.GPSAlt
) %>%
select_at(vars(matches("suggested")))
}
### progress bar
pb <- progress_bar$new(total = nrow(mm.auth.date.gps))
mm.auth.date.gps %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))%>%
mutate (df = list(mm.auth.date.gps)) %>%
count(cust.author)
mm.auth.date.gps  %>%
mutate (df = list(mm.auth.date.gps)) %>%
filter(is.na(cust.GPSLatt)) %>%
mutate ( sugg = pmap(. ,  fun_suggest_gps))
a <-
mm.auth.date.gps  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5)
SourceFile <-  "/Users/sergey/Pictures/iPhone Sergey/DCIM/116APPLE/IMG_6114.JPG"
cust.author <- "authS"
a %>% filter (SourceFile == SourceFile)
### function to suggest
fun_suggest_gps <- function (SourceFile, cust.MediaDate, cust.author, df, ...) {
pb$tick()
tmp.cust.author <- cust.author
tmp.cust.MediaDate <- cust.MediaDate
df %>%
filter ( !is.na(cust.GPSLatt)) %>%
filter (cust.author == tmp.cust.author) %>%
mutate ( suggested.time.diff =  abs (difftime(cust.MediaDate, tmp.cust.MediaDate, units = "hours"))) %>%
arrange ( suggested.time.diff ) %>%
slice_head(n = 1) %>%
rename(
suggested.SourceFile = SourceFile,
suggested.cust.GPSLatt = cust.GPSLatt,
suggested.cust.GPSLong = cust.GPSLong,
suggested.cust.GPSAlt = cust.GPSAlt
) %>%
select_at(vars(matches("suggested")))
}
### progress bar
pb <- progress_bar$new(total = nrow(mm.auth.date.gps))
mm.auth.date.gps %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))%>%
mutate (df = list(mm.auth.date.gps)) %>%
count(cust.author)
mm.auth.date.gps  %>%
mutate (df = list(mm.auth.date.gps)) %>%
filter(is.na(cust.GPSLatt)) %>%
mutate ( sugg = pmap(. ,  fun_suggest_gps))
View(mm.auth.date.gps)
a %>% filter (SourceFile == SourceFile)
a
a  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5) %>%
mutate (df = list(a)) %>%
filter(is.na(cust.GPSLatt)) %>%
mutate ( sugg = pmap(. ,  fun_suggest_gps))
a  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5) %>%
mutate (df = list(a)) %>%
mutate ( sugg = ifelse( is.na(cust.GPSLatt),
pmap(. ,  fun_suggest_gps),
NA)) %>%
unnest(sugg) %>%
select (-df)
a  %>%
select_at((vars(matches("suggested|SourceFile|cust\\.")))) %>%
slice_head(n = 5) %>%
mutate (df = list(a)) %>%
mutate ( sugg = ifelse( is.na(cust.GPSLatt),
pmap(. ,  fun_suggest_gps),
NA)) %>%
unnest(sugg) %>%
select (-df) %>%
view()
print("found authors:")
mm.auth.date.gps %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))%>%
mutate (df = list(mm.auth.date.gps)) %>%
count(cust.author)
mm.auth.date.gps.recs <-
mm.auth.date.gps %>%
mutate (df = list(mm.auth.date.gps)) %>%
mutate ( sugg = ifelse( is.na(cust.GPSLatt),
pmap(. ,  fun_suggest_gps),
NA)) %>%
unnest(sugg) %>%
select (-df)
print("found authors:")
mm.auth.date.gps %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))%>%
mutate (df = list(mm.auth.date.gps)) %>%
count(cust.author)
### progress bar
pb <- progress_bar$new(total = nrow(mm.auth.date.gps))
# recs
mm.auth.date.gps.recs <-
mm.auth.date.gps %>%
mutate (df = list(mm.auth.date.gps)) %>%
mutate ( sugg = ifelse( is.na(cust.GPSLatt),
pmap(. ,  fun_suggest_gps),
NA)) %>%
unnest(sugg) %>%
select (-df)
mm.auth.date.gps.recs %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))
mm.auth.date.gps.recs.out <-
mm.auth.date.gps.recs %>%
select_at(vars(matches("suggested|SourceFile|cust\\.")))
mm.file %>%
str_replace("\\.csv", "-recs.csv")
format(Sys.time(), "%Y-%m-%d-%H-%M-%S")
str_c(format(Sys.time(), "%Y-%m-%d-%H-%M-%S"), "-recs.csv")
str_c("-",format(Sys.time(), "%Y-%m-%d-%H-%M-%S"), "-recs.csv")
str_c("-recs-",format(Sys.time(), "%Y-%m-%d-%H-%M-%S"), ".csv")
mm.file %>%
str_replace("\\.csv",
str_c("-recs-",format(Sys.time(), "%Y-%m-%d-%H-%M-%S"), ".csv"))
out.file.name <-
mm.file %>%
str_replace("\\.csv",
str_c("-recs-",format(Sys.time(), "%Y-%m-%d-%H-%M-%S"), ".csv"))
mm.auth.date.gps.recs.out %>%
write_csv(out.file.name)
